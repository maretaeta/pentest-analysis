import { reactive } from "vue";
import { defineStore } from "pinia";
import axios from 'axios';
import router from '../router/index'

export const useResult = defineStore('result',{
    state: ()=> ({
        resultInfo: {
            domain: 'vent-us.site',
            result: {}
        }
    }),

    actions: {
        async getData(){
            try {
                // console.log('clicled')
                const res = await axios.post('http://127.0.0.1:8000/scan/', {
                    domain: this.resultInfo.domain
                })

                this.resultInfo.result = res.data
                // console.log(this.resultInfo.result)
                
                router.push('/')
                // console.log('end')
            } catch (error) {
                console.log(error)
            }
        },
        getCriticalRisk(){
            if(this.resultInfo.result.exp_day === "0 day"){
                return 1;
            }
            else{
                return 0;
            }
        },
        getHighRisk(){
            let count = 0
            if(!this.resultInfo.result.header["x-frame-options"]) count++
            else if(!this.resultInfo.result.header["strict-transport-security"]) count++
            else if(!this.resultInfo.result.header["content-security-policy"]) count++
            else if(!this.resultInfo.result.header["permissions-policy"]) count++
            else if(!this.resultInfo.result.directories_found[".well-known/security.txt"]) count++

            return count
        },
        getMediumRisk(){
            let count = 0
            if(!this.resultInfo.result.header["x-content-type-options"]) count++
            else if(!this.resultInfo.result.header["x-xss-protection"]) count++
            else if(!this.resultInfo.result.header["referrer-policy"]) count++
            else if(!this.resultInfo.result.directories_found["security.txt"]) count++
            else if(!this.resultInfo.result.directories_found["robots.txt"]) count++

            return count
        },
        getLowRisk(){
            return (!this.resultInfo.result.header["x-powered-by"]) ? 1 : 0
        },
        getInformation(){
            let total = 0
            for (let item in this.resultInfo.result.stack){
                total += this.resultInfo.result.stack[item].length
            }

            return total
        },
        getTotalValue(){
            let critical = this.getCriticalRisk() * 4
            let high = this.getHighRisk() * 3
            let medium = this.getMediumRisk() * 2
            let low = this.getLowRisk() * 1
            console.log("Nilai total ", 100 - (critical + high + medium + low) / 30 * 90)
            return 100 - (critical + high + medium + low) / 30  * 90
        },
        getLevel(){
            if(this.getTotalValue() >= 70) return "Good"
            else if(this.getTotalValue() >= 45) return "Medium"
            else return "Bad"
        }
    }
})


